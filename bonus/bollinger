#! /usr/bin/env python

import sys
import argparse
import os

from calc import moy, standard, variance, readfile

from graph import print_graph

def display_help():
	print("Bollinger Bands\n")
	print("USAGE")
	print("\t./bollinger [-h] period standard_dev indexes_file index_number\n")

	print("\tperiod\t\tnumber of indexes for the moving average")
	print("\tstandard_dev\tstandard deviation coefficient to apply")
	print("\tindexes_file\tfile containing daily indexes")
	print("\tindex_number\tindex number to compute moving average and Bollinger bands\n")

	print("OPTIONS")
	print("\t-h\t\tprint the usage and quit")
	print("\t-g\t\tprint a graphical of bollinger bands")

def print_args(index, period, coef):
	print("INPUT")
	print("Index: {}".format(index))
	print("Period: {}".format(period))
	print("SD_coef: {0:0.2f}".format(coef))

def print_output(lines, index, period, standard_dev):
	B_high = moy(lines) + (standard_dev * standard(lines))
	B_low = moy(lines) - (standard_dev * standard(lines))

	print()
	print("OUTPUT")
	try:
		print("MA: {0:0.2f}".format(moy(lines)))
	except:
		print("No values for this index")
		sys.exit(84)
	print("SD: {0:0.2f}".format(standard(lines)))
	print("B+: {0:0.2f}".format(B_high))
	print("B-: {0:0.2f}".format(B_low))
	

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("period", help="number of indexes for the moving average", type=int)
	parser.add_argument("standard_dev", help="standard deviation coefficient to apply", type=float)
	parser.add_argument("indexes_file", help="file containing daily indexes", type=str)
	parser.add_argument("index_number", help="index number to compute moving average and Bollinger bands", type=int)
	parser.add_argument("-g", "--graph", help="print a graph of bollinger bands", action="store_true")
	args = parser.parse_args()

	if not os.path.isfile(args.indexes_file):
		print("Can't find file '{}'".format(args.indexes_file), file=sys.stderr)
		sys.exit(84)
	elif args.graph:
		print_graph(readfile(args.indexes_file, args.index_number, args.period))
	else:
		print_args(args.index_number, args.period, args.standard_dev)
		print_output(readfile(args.indexes_file, args.index_number, args.period), args.index_number, args.period, args.standard_dev)
	

if __name__ == '__main__':
	main()